import 'reflect-metadata';
import { ApolloServer } from '@apollo/server';
import { buildSchema } from 'type-graphql';
import { startStandaloneServer } from '@apollo/server/standalone';
import { WilderResolver } from './resolver/WilderResolver';
import { datasource } from './db';
import Skill from './entity/Skill';
import SkillResolver from './resolver/SkillResolver';
import Grade from './entity/Grade';
import GradeResolver from './resolver/GradeResolver';
import jwt from 'jsonwebtoken';
import env from './environment';
import User from './entity/User';
import UserResolver from './resolver/UserResolver';

interface MyContext {
  token?: String;
}
async function start(): Promise<void> {
  await datasource.initialize();

  const typeGraphQLgeneratedSchema = await buildSchema({
    resolvers: [UserResolver, WilderResolver, SkillResolver, GradeResolver],
    //  une fonction qui vÃ©rifie si un utilisateur est authentifiÃ© ou non.
    authChecker: ({ context }) => {
      console.log('context from authchecker', context);
      if (context.email !== undefined) {
        return true;
      } else {
        return false;
      }
    },
  });
  const server = new ApolloServer<MyContext>({
    schema: typeGraphQLgeneratedSchema,
    /*
    La fonction context vÃ©rifie si l'en-tÃªte authorization est dÃ©fini et n'est pas vide.
    Si c'est le cas, elle vÃ©rifie le token JWT en utilisant la bibliothÃ¨que jsonwebtoken
    et la clÃ© secrÃ¨te (supersecretkey).
    Si le token est valide, le payload du token (qui contient les informations de l'utilisateur) 
    est renvoyÃ© et est accessible dans tous les rÃ©solveurs. Sinon, un objet vide est retournÃ©.
    */
  });

  const { url } = await startStandaloneServer(server, {
    context: async ({ req }) => {
      console.log('req', req.headers.authorization);
      if (
        req.headers.authorization !== undefined &&
        req.headers.authorization !== ''
      ) {
        const payload = jwt.verify(
          req.headers.authorization.split('Bearer ')[1],
          'supersecretkey'
        );
        console.log('payload', payload);
        return payload;
      }
      return {};
    },
    listen: { port: 4000 },
  });
  console.log(`ðŸš€  Server ready at ${url}`);
}

void start();
